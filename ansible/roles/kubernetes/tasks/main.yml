

- name: disable SWAP (Kubeadm requirement)
  shell: |
    swapoff -a

- name: disable SWAP in fstab (Kubeadm requirement)
  replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    replace: '# \1'

- name: create an empty file for the Containerd module
  copy:
    content: ""
    dest: /etc/modules-load.d/containerd.conf
    force: no

- name: configure modules for Containerd
  blockinfile:
    path: /etc/modules-load.d/containerd.conf
    block: |
          overlay
          br_netfilter

- name: create an empty file for Kubernetes sysctl params
  copy:
    content: ""
    dest: /etc/sysctl.d/99-kubernetes-cri.conf
    force: no

- name: configure sysctl params for Kubernetes
  lineinfile:
    path: /etc/sysctl.d/99-kubernetes-cri.conf
    line: "{{ item }}"
  with_items:
    - 'net.bridge.bridge-nf-call-iptables  = 1'
    - 'net.ipv4.ip_forward                 = 1'
    - 'net.bridge.bridge-nf-call-ip6tables = 1'

- name: apply sysctl params without reboot
  command: sysctl --system

- name: install APT Transport HTTPS
  apt:
    name: apt-transport-https
    state: present


- name: add Kubernetes apt-key
  get_url:
    url: https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key
    dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
    mode: '0644'
    force: true

- name: add Kubernetes' APT repository
  apt_repository:
    repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /"
    state: present
    update_cache: yes

- name: install Containerd
  apt:
    name: containerd.io
    state: present

- name: create Containerd directory
  file:
    path: /etc/containerd
    state: directory

- name: add Containerd configuration
  shell: /usr/bin/containerd config default > /etc/containerd/config.toml

- name: configuring the systemd cgroup driver for Containerd
  lineinfile:
    path: /etc/containerd/config.toml
    regexp: '            SystemdCgroup = false'
    line: '            SystemdCgroup = true'

- name: enable the Containerd service and start it
  systemd:
    name: containerd
    state: restarted
    enabled: yes
    daemon-reload: yes

- name: install Kubelet
  apt:
    name: kubelet=1.29.*
    state: present
    update_cache: true

- name: install Kubeadm
  apt:
    name: kubeadm=1.29.*
    state: present

- name: enable the Kubelet service, and enable it persistently
  service:
    name: kubelet
    enabled: yes

- name: load br_netfilter kernel module
  modprobe:
    name: br_netfilter
    state: present

- name: set bridge-nf-call-iptables
  sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: 1

- name: set ip_forward
  sysctl:
    name: net.ipv4.ip_forward
    value: 1

- name: reboot and wait for reboot to complete
  reboot:

- name: install Kubectl
  apt:
      name: kubectl=1.29.*
      state: present
      force: yes 


- name: create an empty file for Kubeadm configuring
  copy:
    content: ""
    dest: /etc/kubernetes/kubeadm-config.yaml
    force: no

- name: configuring the container runtime including its cgroup driver
  blockinfile:
    path: /etc/kubernetes/kubeadm-config.yaml
    block: |
          kind: ClusterConfiguration
          apiVersion: kubeadm.k8s.io/v1beta3
          networking:
            podSubnet: "10.244.0.0/16"
          ---
          kind: KubeletConfiguration
          apiVersion: kubelet.config.k8s.io/v1beta1
          runtimeRequestTimeout: "15m"
          cgroupDriver: "systemd"
          systemReserved:
            cpu: 100m
            memory: 350M
          kubeReserved:
            cpu: 100m
            memory: 50M
          enforceNodeAllocatable:
          - pods

- name: initialize the cluster (this could take some time)
  shell: kubeadm init --config /etc/kubernetes/kubeadm-config.yaml >> cluster_initialized.log
  args:
    chdir: /home/ubuntu
    creates: cluster_initialized.log

- name: create .kube directory
  become: yes
  become_user: ubuntu
  file:
    path: $HOME/.kube
    state: directory
    mode: 0755

- name: copy admin.conf to user's kube config
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /home/ubuntu/.kube/config
    remote_src: yes
    owner: ubuntu

- name: install Pod network
  become: yes
  become_user: ubuntu
  shell: kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml >> pod_network_setup.log
  args:
    chdir: $HOME
    creates: pod_network_setup.log







# - name: Install dependencies for Kubernetes
#   apt:
#     name:
#       - apt-transport-https
#       - ca-certificates
#       - curl
#       - software-properties-common
#       - gnupg2
#       - lsb-release
#     state: present

# - name: Add Kubernetes apt repository
#   apt_repository:
#     repo: "deb https://apt.kubernetes.io/ kubernetes-xenial main"
#     state: present
#     filename: kubernetes

# - name: Add Kubernetes apt repository GPG key
#   apt_key:
#     url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
#     state: present

# - name: Install Kubernetes components (kubeadm, kubelet, kubectl)
#   apt:
#     name:
#       - kubelet
#       - kubeadm
#       - kubectl
#     state: present

# - name: Initialize Kubernetes cluster
#   command: kubeadm init --pod-network-cidr=192.168.0.0/16
#   args:
#     creates: /etc/kubernetes/admin.conf

# - name: Set up Kubernetes config for the ubuntu user
#   shell: |
#     mkdir -p $HOME/.kube
#     sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
#     sudo chown $(id -u):$(id -g) $HOME/.kube/config
#   become: yes
#   become_user: ubuntu

# - name: Install Calico network plugin
#   command: kubectl apply -f https://docs.projectcalico.org/v3.14/manifests/calico.yaml
#   args:
#     creates: /etc/cni/net.d
