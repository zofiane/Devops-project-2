
# Modification de la route par défaut pour accès externe

- name: Delete the default route via ens4 with metric 100
  ansible.builtin.command: ip route del default via 172.16.0.254 dev ens4
  ignore_errors: yes

- name: Add the default route via ens4 with metric 200
  ansible.builtin.command: ip route add default via 172.16.0.254 dev ens4 metric 200

# - name: Ensure ens4 interface is up
#   ansible.builtin.command: ifup ens4

#  Route par défaut done


# update:
- name: Update apt packages
  ansible.builtin.apt:
    update_cache: true
    upgrade: dist

# Install Pip3

- name: Ensure pip is installed
  apt:
    name: python3-pip
    state: present

#  install Docker 

- name: Update apt cache
  ansible.builtin.apt:
    update_cache: yes

- name: Install dependencies
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
    state: present

- name: Add Docker GPG apt Key
  ansible.builtin.apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add Docker Repository
  ansible.builtin.apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
    state: present

- name: Install Docker
  ansible.builtin.apt:
    name: docker-ce
    state: present

- name: Install Docker Compose
  ansible.builtin.get_url:
    url: "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-linux-x86_64"
    dest: /usr/local/bin/docker-compose
    mode: '0755'

- name: Start Docker service
  ansible.builtin.systemd:
    name: docker
    state: started
    enabled: yes

- name: Add user to docker group
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    groups: docker
    append: yes

- name: Install Docker Python module
  pip:
    name: docker
    state: present
  become: yes

# Installation Docker done 

# installation Java

- name: Ensure Java is installed
  ansible.builtin.apt:
    name: openjdk-17-jdk
    state: present
    update_cache: yes

# Installation Node Exporter 

- name: Create Node Exporter system group
  group:
    name: "{{ node_exporter_group }}"
    state: present
    system: yes

- name: Create Node Exporter system user
  user:
    name: "{{ node_exporter_user }}"
    group: "{{ node_exporter_group }}"
    shell: /usr/sbin/nologin
    system: yes
    create_home: no

- name: Create Node Exporter install directory
  file:
    path: "{{ node_exporter_install_dir }}"
    state: directory
    owner: "{{ node_exporter_user }}"
    group: "{{ node_exporter_group }}"
    mode: '0755'

- name: Download and extract Node Exporter
  unarchive:
    src: "{{ node_exporter_download_url }}"
    dest: "{{ node_exporter_install_dir }}"
    remote_src: yes
    extra_opts: [--strip-components=1]
    creates: "{{ node_exporter_install_dir }}/node_exporter"
    owner: "{{ node_exporter_user }}"
    group: "{{ node_exporter_group }}"

- name: Create Node Exporter systemd service file
  template:
    src: node_exporter.service.j2
    dest: /etc/systemd/system/node_exporter.service
    mode: '0644'

- name: Start and enable Node Exporter service
  systemd:
    name: node_exporter
    state: started
    enabled: yes
    daemon_reload: yes

- name: Print Node Exporter URL
  ansible.builtin.debug:
    msg: "Node Exporter is available at http://{{ ansible_host }}:9100"
    verbosity: 0


# - name: Install required packages
#   ansible.builtin.apt:
#     pkg:
#       - apt-transport-https
#       - ca-certificates
#       - curl
#       - gnupg
#       - software-properties-common

# - name: Create directory for Docker's GPG key
#   ansible.builtin.file:
#     path: /etc/apt/keyrings
#     state: directory
#     mode: '0755'

# - name: Add Docker GPG key to keyring
#   ansible.builtin.get_url:
#     url: https://download.docker.com/linux/ubuntu/gpg
#     dest: /etc/apt/keyrings/docker.gpg
#     mode: '0644'

# - name: Print architecture variables
#   ansible.builtin.debug:
#     msg: "Architecture: {{ ansible_architecture }}, Codename: {{ ansible_lsb.codename }}"

# - name: Add Docker repository
#   ansible.builtin.apt_repository:
#     repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
#     state: present
#     # repo: >-
#     #   deb [arch={{ arch_mapping[ansible_architecture] | default(ansible_architecture) }}
#     #   signed-by=/etc/apt/keyrings/docker.gpg]
#     #   https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable
#     # filename: docker
#     # state: present

# - name: Update apt packages
#   ansible.builtin.apt:
#     update_cache: true

# - name: Install Docker and related packages
#   ansible.builtin.apt:
#     name: "{{ item }}"
#     state: present
#     update_cache: true
#   loop:
#     - docker-ce
#     - docker-ce-cli
#     - containerd.io
#     - docker-buildx-plugin
#     - docker-compose-plugin

# - name: Add Docker group
#   ansible.builtin.group:
#     name: docker
#     state: present

# - name: Add user to Docker group
#   ansible.builtin.user:
#     name: "{{ ansible_user }}"
#     groups: docker
#     append: true

# - name: Enable and start Docker services
#   ansible.builtin.systemd:
#     name: "{{ item }}"
#     enabled: true
#     state: started
#   loop:
#     - docker.service
#     - containerd.service